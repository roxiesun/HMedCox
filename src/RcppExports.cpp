// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/bthm.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BTHMRcpp
List BTHMRcpp(NumericVector y_, NumericVector a_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, NumericVector x_coxcon_, NumericVector m_, NumericVector status_, List x_con_info_list, List x_mod_info_list, List x_coxcon_info_list, NumericVector intv_, int burn, int nd, int thin, int ntree_coxcon, int ntree_mod, int ntree_con, double nu, double con_alpha, double con_beta, double mod_alpha, double mod_beta, double coxcon_alpha, double coxcon_beta, NumericVector kappa_, NumericVector sigest_, NumericVector zeta_, NumericVector truehzd_, NumericVector hcsig_coxcon_, NumericVector hcsig_mod_, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, CharacterVector treef_coxcon_name_, double t_survp, int printevery, double trt_init, int nknots, bool verbose_sigma, bool vs);
static SEXP _bthm_BTHMRcpp_try(SEXP y_SEXP, SEXP a_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_coxcon_SEXP, SEXP m_SEXP, SEXP status_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP x_coxcon_info_listSEXP, SEXP intv_SEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_coxconSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP nuSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP coxcon_alphaSEXP, SEXP coxcon_betaSEXP, SEXP kappa_SEXP, SEXP sigest_SEXP, SEXP zeta_SEXP, SEXP truehzd_SEXP, SEXP hcsig_coxcon_SEXP, SEXP hcsig_mod_SEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP treef_coxcon_name_SEXP, SEXP t_survpSEXP, SEXP printeverySEXP, SEXP trt_initSEXP, SEXP nknotsSEXP, SEXP verbose_sigmaSEXP, SEXP vsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_coxcon_(x_coxcon_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m_(m_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status_(status_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_coxcon_info_list(x_coxcon_info_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type intv_(intv_SEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_coxcon(ntree_coxconSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< double >::type coxcon_alpha(coxcon_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type coxcon_beta(coxcon_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_(kappa_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigest_(sigest_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeta_(zeta_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type truehzd_(truehzd_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hcsig_coxcon_(hcsig_coxcon_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hcsig_mod_(hcsig_mod_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_coxcon_name_(treef_coxcon_name_SEXP);
    Rcpp::traits::input_parameter< double >::type t_survp(t_survpSEXP);
    Rcpp::traits::input_parameter< int >::type printevery(printeverySEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< int >::type nknots(nknotsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type vs(vsSEXP);
    rcpp_result_gen = Rcpp::wrap(BTHMRcpp(y_, a_, w_, x_con_, x_mod_, x_coxcon_, m_, status_, x_con_info_list, x_mod_info_list, x_coxcon_info_list, intv_, burn, nd, thin, ntree_coxcon, ntree_mod, ntree_con, nu, con_alpha, con_beta, mod_alpha, mod_beta, coxcon_alpha, coxcon_beta, kappa_, sigest_, zeta_, truehzd_, hcsig_coxcon_, hcsig_mod_, treef_con_name_, treef_mod_name_, treef_coxcon_name_, t_survp, printevery, trt_init, nknots, verbose_sigma, vs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _bthm_BTHMRcpp(SEXP y_SEXP, SEXP a_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_coxcon_SEXP, SEXP m_SEXP, SEXP status_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP x_coxcon_info_listSEXP, SEXP intv_SEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_coxconSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP nuSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP coxcon_alphaSEXP, SEXP coxcon_betaSEXP, SEXP kappa_SEXP, SEXP sigest_SEXP, SEXP zeta_SEXP, SEXP truehzd_SEXP, SEXP hcsig_coxcon_SEXP, SEXP hcsig_mod_SEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP treef_coxcon_name_SEXP, SEXP t_survpSEXP, SEXP printeverySEXP, SEXP trt_initSEXP, SEXP nknotsSEXP, SEXP verbose_sigmaSEXP, SEXP vsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_bthm_BTHMRcpp_try(y_SEXP, a_SEXP, w_SEXP, x_con_SEXP, x_mod_SEXP, x_coxcon_SEXP, m_SEXP, status_SEXP, x_con_info_listSEXP, x_mod_info_listSEXP, x_coxcon_info_listSEXP, intv_SEXP, burnSEXP, ndSEXP, thinSEXP, ntree_coxconSEXP, ntree_modSEXP, ntree_conSEXP, nuSEXP, con_alphaSEXP, con_betaSEXP, mod_alphaSEXP, mod_betaSEXP, coxcon_alphaSEXP, coxcon_betaSEXP, kappa_SEXP, sigest_SEXP, zeta_SEXP, truehzd_SEXP, hcsig_coxcon_SEXP, hcsig_mod_SEXP, treef_con_name_SEXP, treef_mod_name_SEXP, treef_coxcon_name_SEXP, t_survpSEXP, printeverySEXP, trt_initSEXP, nknotsSEXP, verbose_sigmaSEXP, vsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _bthm_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*BTHMRcpp)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,List,List,List,NumericVector,int,int,int,int,int,int,double,double,double,double,double,double,double,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,CharacterVector,CharacterVector,CharacterVector,double,int,double,int,bool,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _bthm_RcppExport_registerCCallable() { 
    R_RegisterCCallable("bthm", "_bthm_BTHMRcpp", (DL_FUNC)_bthm_BTHMRcpp_try);
    R_RegisterCCallable("bthm", "_bthm_RcppExport_validate", (DL_FUNC)_bthm_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP _rcpp_module_boot_TreeSamples();

static const R_CallMethodDef CallEntries[] = {
    {"_bthm_BTHMRcpp", (DL_FUNC) &_bthm_BTHMRcpp, 40},
    {"_rcpp_module_boot_TreeSamples", (DL_FUNC) &_rcpp_module_boot_TreeSamples, 0},
    {"_bthm_RcppExport_registerCCallable", (DL_FUNC) &_bthm_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_bthm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
